{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\n\nconst useFetch = url => {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const controller = new AbortController();\n    const {\n      signal\n    } = controller;\n    setTimeout(() => {\n      fetch(url, {\n        signal\n      }).then(res => {\n        if (!res.ok) {\n          // error coming back from server\n          throw Error('could not fetch the data for that resource');\n        }\n\n        return res.json();\n      }).then(data => {\n        setIsPending(false);\n        setData(data);\n        setError(null);\n      }).catch(err => {\n        if (err.name === \"AbortError\") {\n          console.error(err.message);\n        } else {\n          // auto catches network / connection error\n          setIsPending(false);\n          setError(err.message);\n        }\n      });\n    }, 1000); // abort the fetch\n\n    return () => controller.abort();\n  }, [url]);\n  return {\n    data,\n    isPending,\n    error\n  };\n};\n\n_s(useFetch, \"VxPkICXS4AfkXU1R8tuEJAA8e58=\");\n\nexport default useFetch;","map":{"version":3,"sources":["/home/yakhya/Desktop/learn react/blog-firebase/src/hooks/useFetch.js"],"names":["useState","useEffect","useFetch","url","data","setData","isPending","setIsPending","error","setError","controller","AbortController","signal","setTimeout","fetch","then","res","ok","Error","json","catch","err","name","console","message","abort"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,QAAQ,GAAIC,GAAD,IAAS;AAAA;;AAEtB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,UAAU,GAAG,IAAIC,eAAJ,EAAnB;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAaF,UAAnB;AAEAG,IAAAA,UAAU,CAAC,MAAM;AACbC,MAAAA,KAAK,CAACX,GAAD,EAAM;AAAES,QAAAA;AAAF,OAAN,CAAL,CACKG,IADL,CACUC,GAAG,IAAI;AACT,YAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AAAE;AACX,gBAAMC,KAAK,CAAC,4CAAD,CAAX;AACH;;AACD,eAAOF,GAAG,CAACG,IAAJ,EAAP;AACH,OANL,EAOKJ,IAPL,CAOUX,IAAI,IAAI;AACVG,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAK,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,OAXL,EAYKW,KAZL,CAYWC,GAAG,IAAI;AACV,YAAIA,GAAG,CAACC,IAAJ,KAAa,YAAjB,EAA+B;AAC3BC,UAAAA,OAAO,CAACf,KAAR,CAAca,GAAG,CAACG,OAAlB;AACH,SAFD,MAEO;AACP;AACIjB,UAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,UAAAA,QAAQ,CAACY,GAAG,CAACG,OAAL,CAAR;AACH;AACJ,OApBL;AAqBC,KAtBK,EAsBH,IAtBG,CAAV,CAJY,CA4BZ;;AACA,WAAO,MAAMd,UAAU,CAACe,KAAX,EAAb;AAEH,GA/BQ,EA+BN,CAACtB,GAAD,CA/BM,CAAT;AAiCA,SAAO;AAACC,IAAAA,IAAD;AAAOE,IAAAA,SAAP;AAAkBE,IAAAA;AAAlB,GAAP;AACH,CAxCD;;GAAMN,Q;;AAyCN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react'\n\nconst useFetch = (url) => {\n\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const controller = new AbortController();\n        const { signal } = controller;\n        \n        setTimeout(() => {\n            fetch(url, { signal })\n                .then(res => {\n                    if (!res.ok) { // error coming back from server\n                        throw Error('could not fetch the data for that resource');\n                    }\n                    return res.json();\n                })\n                .then(data => {\n                    setIsPending(false);\n                    setData(data);\n                    setError(null);\n                })\n                .catch(err => {\n                    if (err.name === \"AbortError\") {\n                        console.error(err.message)\n                    } else {\n                    // auto catches network / connection error\n                        setIsPending(false);\n                        setError(err.message);\n                    }\n                })\n            }, 1000)\n\n        // abort the fetch\n        return () => controller.abort()\n\n    }, [url])\n\n    return {data, isPending, error}\n}\nexport default useFetch"]},"metadata":{},"sourceType":"module"}